const passport = require('passport');
const mongoose = require('mongoose');
const GoogleStrategy = require('passport-google-oauth20').Strategy;

const keys = require('../config/keys');

const User = mongoose.model('users'); // this is the 'users' model we created
// in User.js

passport.serializeUser((user, done) => {
    done(null, user.id); // id generated by mongo
});

passport.deserializeUser(async(id, done) => {
    const user = await User.findById(id);
    done(null, user)
});

passport.use(new GoogleStrategy({
    clientID: keys.GOOGLE_CLIENT_ID,
    clientSecret: keys.GOOGLE_CLIENT_SECRET,
    callbackURL: '/auth/google/callback',
    proxy: true
}, async(accessToken, refreshToken, profile, done) => {
    try {
        const existingUser = await User.findOne({googleId: profile.id});
        if (existingUser) {
            console.log('User already exist');
            done(null, existingUser);
        } else {
            const newUser = await new User({googleId: profile.id}).save();
            console.log('New user', newUser);
            if (newUser) {
                done(null, newUser)
            }
        }
    } catch (error) {
        console.log(error);
    }
}));